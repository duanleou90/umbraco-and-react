@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<OBlogpost>
@inject Umbraco.Cms.Core.Services.IContentService ContentService
@using Oski.Core.Helpers;
@using System.Globalization
@using Umbraco.Cms.Core.Services
@inject IUserService UserService;
@{
    Layout = "Main.cshtml";

    var cultureCode = UmbracoContext.PublishedRequest.PublishedContent;
    string selectedLanguage = "en-US";

    @foreach (var (culture, infos) in cultureCode.Cultures)
    {
        if (cultureCode.GetCultureFromDomains().ToLower().Equals(culture))
        {
            selectedLanguage = new CultureInfo(culture).IetfLanguageTag;
            continue;
        }
    }

    CultureInfo cultureInfo = new CultureInfo(selectedLanguage);

    var parentNode = Model.Parent is OBlog ? Model.Parent : Model;
    var blog = Model.Parent as OBlog;
    var latestArticles = Model.OLatestArticles;
    var configBlog = blog.ConfigBlog;
    var showSocialInPost = configBlog.Any(a => a == "Show social in post");
    var showAuthorAndReadTime = configBlog.Any(a => a == "Show author and read time");
    var showSideMenu = configBlog.Any(a => a == "Show side menu");
    var altText = Umbraco.Media(Model.OPreviewImage.Key)!.Value("umbracoAltText")?.ToString() ?? "blog post image";
    var request = Context.Request;
    var scheme = request.Scheme;
    var host = request.Host;
    var path = request.Path;
    var queryString = request.QueryString;
    var currentUrl = $"{scheme}://{host}{path}{queryString}";

    var author = UserService.GetUserById(Convert.ToInt32(Model?.OAuthor));
    var (authorPage, authorAvatar) = Model.GetAuthorPageAndAvatar(author);
}

<main class="inner-page" style="display:flex; justify-content: center;">
    <section class="content blogpost-content">
        <div class="container">
            <div class="content__inner">
                <div class="content-info">
                    <div>
                        @await Html.PartialAsync("oskiPartials/OBreadcrumb")
                    </div>
                    <div class="blogpost-title">
                        <h1>@Model.OTitle</h1>
                    </div>
                    <div>
                        @if (showAuthorAndReadTime)
                        {
                            <div style="display: flex; flex-direction: column;">                                
                                <div class="blogpost-header">
                                    <div class="inner-flex-container" style="width: 100%">
                                        <img src="@authorAvatar" alt="@author!=null? @author.Name: author avatar" />
                                        <div class="text-container">
                                            <span class="author-text" style="width: 100%;">
                                                <a href="@authorPage" class="author__link">By @author?.Name</a><br />
                                            </span>
                                            <span class="text-date">
                                                @Umbraco.GetDictionaryValueOrDefault("BlogPost.Published", "Published: ") @Model.CreateDate.ToString("MMMM d, yyyy", cultureInfo)
                                            </span>
                                        </div>
                                    </div>
                                    <div class="inner-flex-container">
                                        @{
                                            var readTime = CalculationTime.CalculateReadTime(Model.OContent.Select(item => item.Content));
                                        }
                                        <span class="text-date readtime">
                                            @readTime @Umbraco.GetDictionaryValueOrDefault("BlogPost.MinRead", " min read")
                                        </span>

                                        <!-- Dropdown button -->
                                        <div class="dropdown-container">
                                            <button id="myButton" class="text-like-button dropdown-button">
                                                <img src="~/Content/images/share-icon.svg" alt="Button Image" />
                                                <span class="text-date"> @Umbraco.GetDictionaryValueOrDefault("BlogPost.Share", "Share")</span>
                                            </button>

                                            @if (blog.ShareLinks.Any())
                                            {
                                                <!-- Dropdown content -->
                                                <div id="contextMenu" class="context-menu dropdown-content" hidden>
                                                    <ul>
                                                        @foreach (SocialLink link in blog.ShareLinks.Cast<SocialLink>())
                                                        {
                                                            var shareLink = link.OUrl.First().Name + currentUrl;
                                                            string onClickEvent = "";
                                                            if (link.OSocialNetworkName == "Copy link")
                                                            {
                                                                onClickEvent = "onclick=navigator.clipboard.writeText(window.location.href);";
                                                                shareLink = null;
                                                            }

                                                            <li>
                                                                <a href="@shareLink" class="blogpost-share-social-icon section-1" 
                                                                   target="@(link.OUrl.First().Target)"
                                                                   title="@(onClickEvent == "" ? $"Share on {link.OSocialNetworkName}" : link.OSocialNetworkName )"
                                                                   @onClickEvent style="cursor:pointer;">

                                                                    @Html.Raw(System.IO.File.ReadAllText("wwwroot" + link.OIcon.Url()))
                                                                    <span class="social-top">@link.OSocialNetworkName</span>
                                                                </a>
                                                            </li>
                                                        }
                                                    </ul>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        @if (Model.OPreviewImage != null && !Model.OHidePreviewImageInPost)
                        {
                            <div class="blogpost-main-image oski-mb-3 oski-mt-1">
                                <img src="@Model.OPreviewImage.Url()" alt="@altText" />
                            </div>
                        }

                        @foreach (var item in Model.OContent)
                        {
                            var type = item.GetType().Name;
                            @await Html.PartialAsync($"oskiPartials/{type}", item, new ViewDataDictionary(ViewData) { { "name", Model.Name }, { "isParentPage", !(Model.Parent is OGenericAboutPage) } })
                        }
                    </div>
                    @if (showSocialInPost)
                    {
                        @if (Model.OTags.Any())
                        {
                            <div class="blogpost-news-item-tags oski-mt-2">
                                <span class="span-tags">Tags:</span>
                                @foreach (var tag in Model.OTags)
                                {
                                    <a class="blogpost-tag" href="@(Model.Parent.Url() + $"?tag={tag}")">@tag</a>

                                }
                            </div>
                        }
                        @if (blog.ShareLinks.Any())
                        {
                            <div class="container-shareLinks">
                                <h4 class="title-socialLink">@Umbraco.GetDictionaryValueOrDefault("BlogPost.TitleSocialLink", "Don’t forget to share this post!") </h4>
                                <div class="blogpost-share-social-container">
                                    @foreach (SocialLink link in blog.ShareLinks.Cast<SocialLink>())
                                    {
                                        var shareLink = link.OUrl.First().Name + currentUrl;
                                        string onClickEvent = "";
                                        if (link.OSocialNetworkName == "Copy link")
                                        {
                                            onClickEvent = "onclick=navigator.clipboard.writeText(window.location.href);";
                                            shareLink = null;
                                        }

                                        <a href="@shareLink" @onClickEvent style="cursor:pointer;"
                                           class="blogpost-share-social-icon"
                                           title="@(onClickEvent == "" ? $"Share on {link.OSocialNetworkName}" : link.OSocialNetworkName)"
                                           target="@(link.OUrl.First().Target)">
                                            
                                            @Html.Raw(System.IO.File.ReadAllText("wwwroot" + link.OIcon.Url()))
                                        </a>
                                    }
                                </div>
                            </div>
                        }
                    }
                    @if (Model.OLatestArticles != null && Model.OLatestArticles.Any())
                    {
                        <div class="latest-articles">
                            <h4 class="oski-mb-4">@Umbraco.GetDictionaryValueOrDefault("BlogPost.LatestArticlesTitle", "Latest Articles Title")</h4>
                            <div class="latest-articles-area-container oski-mb-5">
                                @foreach (var item in Model.OLatestArticles)
                                {
                                    string udiString = item.Udi.ToString();
                                    Guid guid;

                                    string guidString = udiString.Split('/')[3];
                                    if (Guid.TryParse(guidString, out guid))
                                    {
                                        var content = ContentService.GetById(guid);
                                        if (content != null)
                                        {
                                            var title = content.Properties["oTitle"].Values.Where(v => 
                                                cultureCode.GetCultureFromDomains().ToLower().Equals(v.Culture)).FirstOrDefault()?.PublishedValue;                                            
                                            var description = content.Properties["oDescription"].Values.Where(v =>
                                                cultureCode.GetCultureFromDomains().ToLower().Equals(v.Culture)).FirstOrDefault()?.PublishedValue;
                                            string url = item.Url;

                                            <div class="latest-articles-area">
                                                <h4><a href="@url" class="latestArticleslink">@title</a></h4>
                                                <p>@description</p>
                                            </div>
                                        }
                                    }
                                }
                            </div>
                        </div>
                    }
                </div>

            </div>
        </div>
    </section>
</main>