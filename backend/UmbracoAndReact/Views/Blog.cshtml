@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<OBlog>
@using Oski.Core.ContentModel
@using Oski.Core.Helpers
@using Umbraco.Cms.Core.Models.Blocks;
@using Umbraco.Cms.Core.Services
@using System.Globalization
@inject IUserService UserService;
@{
    Layout = "Main.cshtml";
    const string noPreviewBlockMessage = "The preview block is not specified for this article in backoffice.";

    var posts = new List<BlogpostContentModel>();
    foreach (var p in Model.Children)
    {
        if (p is OBlogpost blogpost)
        {
            posts.Add(new BlogpostContentModel
            {
                CreateDate = blogpost.CreateDate,
                OCategories = blogpost.OCategories,
                OTags = blogpost.OTags,
                OPreviewImage = blogpost.OPreviewImage,
                OTitle = blogpost.OTitle,
                ODescription = blogpost.ODescription,
                Url = blogpost.Url() as string,
                OAuthor = blogpost.OAuthor,
                WriterName = blogpost.WriterName(),
                OContent = blogpost.OContent as object
            });
        }
        else if (p is BlockGridPage blockGridPage)
        {
            var blogPostPreviewBlock = blockGridPage.BlogGrid
                .FirstOrDefault(b => b.Content.ContentType.Alias == OBlogPostPreviewBlock.ModelTypeAlias)?
                .Content as OBlogPostPreviewBlock;

            posts.Add(new BlogpostContentModel
            {
                CreateDate = p.CreateDate,
                OCategories = blogPostPreviewBlock?.OCategories,
                OTags = blogPostPreviewBlock?.OTags,
                OPreviewImage = blogPostPreviewBlock?.OPreviewImage,
                OTitle = blogPostPreviewBlock?.OTitle,
                ODescription = blogPostPreviewBlock != null ? blogPostPreviewBlock.ODescription : noPreviewBlockMessage,
                Url = blockGridPage.Url(),
                OAuthor = blogPostPreviewBlock?.OAuthor,
                WriterName = blockGridPage.WriterName(),
                OContent = blockGridPage.BlogGrid as object
            });
        }
    }

    /*var posts = Model.Children.Select(p =>
    {
        if (p is OBlogpost blogpost)
        {
            return new
            {
                CreateDate = blogpost.CreateDate,
                OCategories = blogpost.OCategories,
                OTags = blogpost.OTags,
                OPreviewImage = blogpost.OPreviewImage,
                OTitle = blogpost.OTitle,
                ODescription = blogpost.ODescription,
                Url = blogpost.Url() as string,
                OAuthor = blogpost.OAuthor,
                WriterName = blogpost.WriterName(),
                OContent = blogpost.OContent as object
            };
        }

        var blockGridPage = (BlockGridPage)p;
        var blogPostPreviewBlock = blockGridPage.BlogGrid
                    .FirstOrDefault(b => b.Content.ContentType.Alias == OBlogPostPreviewBlock.ModelTypeAlias)?
                    .Content as OBlogPostPreviewBlock;


        return new
        {
            CreateDate = p.CreateDate,
            OCategories = blogPostPreviewBlock?.OCategories,
            OTags = blogPostPreviewBlock?.OTags,
            OPreviewImage = blogPostPreviewBlock?.OPreviewImage,
            OTitle = blogPostPreviewBlock?.OTitle,
            ODescription = blogPostPreviewBlock != null ? blogPostPreviewBlock.ODescription : noPreviewBlockMessage,
            Url = blockGridPage.Url(),
            OAuthor = blogPostPreviewBlock?.OAuthor,
            WriterName = blockGridPage.WriterName(),
            OContent = blockGridPage.BlogGrid as object
        };
    });*/

    var sortlink = !string.IsNullOrWhiteSpace(Context.Request.Query["sort"].ToString()) ? $"&sort={Context.Request.Query["sort"].ToString()}" : "";

    sortlink += !string.IsNullOrWhiteSpace(Context.Request.Query["category"].ToString()) ? $"&category={Context.Request.Query["category"].ToString()}" : "";

    sortlink += !string.IsNullOrWhiteSpace(Context.Request.Query["tag"].ToString()) ? $"&tag={Context.Request.Query["tag"].ToString()}" : "";

    if (!string.IsNullOrWhiteSpace(Context.Request.Query["category"].ToString()))
    {
        posts = posts.Where((x) => x.OCategories.ToLower() == Context.Request.Query["category"].ToString()).ToList();
    }
    if (!string.IsNullOrWhiteSpace(Context.Request.Query["tag"].ToString()))
    {
        posts = posts.Where((x) => x.OTags.Select((t) => t.ToLower()).ContainsAny(Context.Request.Query["tag"].ToString().ToLower().Split(","))).ToList();
    }

    var orderby = posts.OrderByDescending(x => x.CreateDate);

    double maxPage = Math.Ceiling((double)(posts.Count()) / Model.OTake);

    if (int.TryParse(Context.Request.Query["page"], out int page))
    {
        if (page < 1 || page > maxPage)
        {
            Context.Response.Redirect(Model.Url());
        }
    }
    else
    {
        page = 1;
    }

    var blogposts = orderby.Skip(Model.OTake * (page - 1)).Take(Model.OTake).ToList();
    var configBlog  = Model.ConfigBlog;
    var showAuthorAndReadTime = configBlog.FirstOrDefault(a => a == "Show author and read time") != null;
    var showSideMenu = configBlog.FirstOrDefault(a => a == "Show side menu") != null;
    var twoColorMap = showSideMenu? "two-Colom" : string.Empty;

    var cultureCode = UmbracoContext.PublishedRequest.PublishedContent;
    string selectedLanguage = "en-us";
    @foreach (var (culture, infos) in cultureCode.Cultures)
    {
        if (cultureCode.GetCultureFromDomains().ToLower().Equals(culture))
        {
            selectedLanguage = new CultureInfo(culture).IetfLanguageTag;
            continue;
        }
    }
    CultureInfo cultureInfo = new CultureInfo(selectedLanguage);
}
<main class="inner-page">

    <section class="content">
        <div class="container">

            <div class="content__inner content__padding">
                <!-- @twoColorMap -->
                <div style="display: none;">
                    @Model.OTitle
                </div>
                <hr class="shadowed-line container">
                @if(showSideMenu){
                    @await Html.PartialAsync("oskiPartials/oCategoriesMenuForNews")
                }
                @if (blogposts.Any())
                {
                    <div class="content-info">
                        <div style="padding: 0 15px">
                            @await Html.PartialAsync("oskiPartials/OBreadcrumb")
                        </div>
                        <div class="blog-container">
                            @foreach (var blogPost in blogposts)
                            {
                                var imageUrl = blogPost.OPreviewImage?.Url() ?? string.Empty;
                                var imageHeight = blogPost.OPreviewImage?.Value<int>("umbracoHeight");
                                var imageWidth = blogPost.OPreviewImage?.Value<int>("umbracoWidth");
                                var altText = blogPost.OPreviewImage != null ? Umbraco.Media(blogPost.OPreviewImage.Key)?
                                .Value("umbracoAltText")?.ToString() : "blog image";
                                altText = !string.IsNullOrEmpty(altText) ? altText : "blog post preview image";
                                <div class="blogpost">
                                    <a class="blogpost-link" href="@blogPost.Url">
                                        @if (!string.IsNullOrEmpty(imageUrl))
                                        {
                                            <div class="blogpost-image">
                                                <img style="width: @(imageWidth > imageHeight ? "100%" : "")" src="@imageUrl" 
                                                     alt="@altText" />
                                            </div>
                                        }
                                        <div class="blogpost-info">

                                            <div class="blogpost-title">@blogPost.OTitle</div>
                                            <div class="blogpost-description">@blogPost.ODescription</div>
                                            @if (blogPost.OTags != null && blogPost.OTags.Any() && showSideMenu)
                                            {
                                                <div>
                                                    <div class="blogpost-tags">
                                                        @foreach (var tag in blogPost.OTags)
                                                        {
                                                            <span class="blogpost-tag tags-blog">@tag</span>
                                                        }
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                        @if (showAuthorAndReadTime)
                                        {
                                            var author = UserService.GetUserById(Convert.ToInt32(blogPost?.OAuthor));
                                            var (_, authorAvatar) = Model.GetAuthorPageAndAvatar(author);
                                            <div class="blogpost-footer">
                                                <div style="display: flex; flex-direction: row; width: 100%">
                                                    <div class="blogpost-footer__imgContainer">
                                                        <img src="@authorAvatar" alt="@author!=null? @author.Name: author avatar" />
                                                    </div>
                                                    @{
                                                        var readTime = 0d;

                                                        if (blogPost.OContent is IEnumerable<IPublishedElement> nestedContent)
                                                        {
                                                            readTime = CalculationTime.CalculateReadTime(nestedContent);
                                                        }

                                                        if (blogPost.OContent is BlockGridModel blockGridPageContent)
                                                        {
                                                            readTime = CalculationTime.CalculateReadTime(blockGridPageContent);
                                                        }

                                                    }
                                                    <div style="margin-left: 5%;">
                                                        <div>
                                                            @author?.Name
                                                        </div>
                                                        <div style="color: #707070">
                                                            @readTime @Umbraco.GetDictionaryValueOrDefault("BlogPost.MinRead", "min time") ·&nbsp @blogPost.CreateDate.ToString("MMM d, yyyy", cultureInfo)                                                            
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </a>
                                </div>
                            }

                            @if ((blogposts.Count() % 2) == 0)
                            {
                                <div class="blogpost"></div>
                            }
                        </div>
                        <div class="pagination-container">
                            <div class="pagination">
                                <ul class="pagination__block">
                                    <li class="pagination__item @((page - 1) < 1 ? "d-none" : "")">
                                        <a href="@($"{Model.Url()}?page={page - 1}{sortlink}")">&#129152</a>
                                    </li>
                                    <li class="pagination__item @((page - 3) < 1 ? "d-none" : "")">
                                        <a href="@($"{Model.Url()}?page={1}{sortlink}")">1</a>
                                    </li>
                                    <li class="pagination__item @((page - 4) < 1 ? "d-none" : "")">...</li>
                                    <li class="pagination__item @((page - 2) < 1 ? "d-none" : "")">
                                        <a href="@($"{Model.Url()}?page={page - 2}{sortlink}")">@(page - 2)</a>
                                    </li>
                                    <li class="pagination__item @((page - 1) < 1 ? "d-none" : "")">
                                        <a href="@($"{Model.Url()}?page={page - 1}{sortlink}")">@(page - 1)</a>
                                    </li>
                                    <li class="pagination__item active">
                                        <a class="active" href="@($"{Model.Url()}?page={page}{sortlink}")">@(page)</a>
                                    </li>
                                    <li class="pagination__item @((page + 1) > maxPage ? "d-none" : "")">
                                        <a href="@($"{Model.Url()}?page={page + 1}{sortlink}")">@(page + 1)</a>
                                    </li>
                                    <li class="pagination__item @((page + 2) > maxPage ? "d-none" : "")">
                                        <a href="@($"{Model.Url()}?page={page + 2}{sortlink}")">@(page + 2)</a>
                                    </li>
                                    <li class="pagination__item @((page + 4) > maxPage ? "d-none" : "")">...</li>
                                    <li class="pagination__item @((page + 3) > maxPage ? "d-none" : "")">
                                        <a href="@($"{Model.Url()}?page={maxPage}{sortlink}")">@maxPage</a>
                                    </li>
                                    <li class="pagination__item @((page + 1) > maxPage ? "d-none" : "")">
                                        <a href="@($"{Model.Url()}?page={page + 1}{sortlink}")">&#129154</a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </section>
</main>